extensionName = "gogo"
markdownTemplate = """
# The NetLogo GoGo Extension for sensors and robotics


This is the new extension for physical computing, using sensors, motors, etc in NetLogo. It interfaces with GoGo boards running Human Interface Driver (HID) firmware, and it replaces the old GoGo Extension, which used USB-serial communications. (The USB-serial GoGo extension is still available for NetLogo 5.3.1 and earlier [here](https://github.com/NetLogo/GoGo-Serial-Extension).)

This extension comes bundled with NetLogo 5.2 and later.  The source code is hosted online at
https://github.com/NetLogo/GoGo-HID-Extension.

{{> BUILDING.md}}

{{> USING.md}}

## Primitives

{{#contents}}
### {{fullCategoryName}}

{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}

{{/contents}}

{{#primitives}}
{{> primTemplate}}
{{/primitives}}
"""
additionalVariables = {
  netlogoUrl: "http://ccl.northwestern.edu/netlogo/docs/"
},
primTemplate = """
### `{{name}}`

```NetLogo
{{#examples}}
{{primitive.fullName}}{{#args}} {{name}}{{/args}}
{{/examples}}
```

{{{description}}}
"""
filesToIncludeInManual = [ "USING.md", "primitives" ]
tableOfContents = {
  "general"        : "General",
  "outputs-servos" : "Outputs and Servos",
  "outputs-other"  : "Other Outputs",
  "sensors"        : "Sensors",
  "utilities"      : "Utilities"
}
primitives = [
  {
    name: primitives,
    type: reporter,
    returns: list,
    tags: [ "general" ],
    description: "Returns a list of the primitives of this extension."
  },
  {
    name: howmany-gogos,
    type: reporter,
    returns: number,
    tags: ["general"],
    description: """
Reports the number of USB HID devices visible to the computer and having the correct vendor and product ID to be a GoGo board.  A board will only be detected if it is both connected and powered on.  Using this primitive is one way to determine quickly whether a GoGo board has the HID firmware loaded. (A USB-Serial version of the board will not be detected.).
"""
  },
  {
    name: talk-to-output-ports,
    type: command,
    tags: ["outputs-servos"],
    arguments: [ { name: list-of-portnames, type: list } ],
    description: "Establishes a list of output ports that will be controlled with subsequent "output-port" commands.  See below..."
  },
  {
    name: set-output-port-power,
    type: command,
    tags: ["outputs-servos"],
    arguments: [ { name: power-level, type: number } ],
    description: """
`power-level` is a number between 0 and 100, reflecting the percentage of maximum power.
Sets the amount of power that will be fed to the output ports indicated in `talk-to-output-ports`.
This will not affect the on-off state of the output ports.
So, for example, if a motor is already connected to an output port and running, changing its power will change its speed.
If the motor is not running, changing the power level will not turn it on; instead, it will affect the speed at which the motor starts when it is turned on with `output-port-on`.
"""
  },
  {
    name: output-port-on,
    type: command,
    tags: ["outputs-servos"],
    description: """
Turns on the output ports which have been indicated with talk-to-output-ports.
If none have been set with talk-to-output-ports, no ports will be turned on.
"""
  },
  {
    name: output-port-off,
    type: command,
    tags: ["outputs-servos"],
    description: """
Turns off the output ports which have been indicated with talk-to-output-ports.
If none have been set with talk-to-output-ports, no ports will be turned off.
"""
  },
  {
    name: output-port-clockwise,
    type: command,
    tags: ["outputs-servos"],
    description: """
Sets the polarity of the output port(s) that have been specified with talk-to-output-ports,
so that a motor attached to one of these ports would turn clockwise.
"""
  },
  {
    name: output-port-counterclockwise,
    type: command,
    tags: ["outputs-servos"],
    description: """
Sets the polarity of the output port(s) that have been specified with `talk-to-output-ports`, so that a motor attached to one of these ports would turn counterclockwise.
"""
  },
  {
    name: set-servo,
    type: command,
    arguments: [ { type: number } ],
    tags: ["outputs-servos"],
    description: """
Sets the Pulse-Width Modulation (PWM) proportion of the output port(s) that have been specified with talk-to-output-ports.  Note that the servo connectors are the male pins next to the standard motor connectors.  Different servos respond to different PWM ranges, but all servos read PWM proportions and set the position of their main gear accordingly.
"""
  },
  {
    name: led,
    type: command,
    tags: ["outputs-other"],
    arguments: [ { type: number, name: on-or-off } ],
    description: """
Turns the user-LED on or off, depending on the argument.  gogo:led 1 turns the LED on; gogo:led 0 turns it off.
"""
  },
  {
    name: beep,
    type: command,
    tags: ["outputs-other"],
    description: "Causes the GoGo board to beep."
  },
  {
    name: read-sensors,
    type: reporter,
    returns: list,
    tags: ["sensors"],
    description: "Reports a list containing the current readings of all eight sensors ports of the GoGo."
  },
  {
    name: read-sensor,
    tags: ["sensors"],
    type: reporter,
    returns: number,
    arguments: [ { name: which-sensor, type: number } ],
    description: """
Reports the value of sensor number *which-sensor*, where *which-sensor* is a number between 0-7.
"""
  },
  {
    name: read-all,
    tags: ["utilities"],
    type: reporter,
    returns: list,
    description: "Reports all data available from the board, in a raw-list form useful for debugging."
  },
  {
    name: send-bytes,
    tags: ["utilties"],
    type: command,
    arguments: [ { type: list } ],
    description: "Sends a list of bytes to the GoGo board.  Useful for debugging or for testing any new or future functionality that is added to the GoGo board with new firmware updates."
  }
]
